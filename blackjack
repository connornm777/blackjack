#!/usr/bin/env python3
import pygame, random, copy, pdb
import numpy as np
from datetime import datetime

penetration = 1.5
shoe_size = 6
card_back = 'reg'
global bankrollstart 
bankrollstart = 2000

#######################################################################

pygame.init()
back_fill = (255, 230, 255)
green = (100, 200, 100)
red = (255, 200, 200)
black = (0, 0, 0)
white = (255, 255, 255)
display_height = 800
display_width = 1400


pygame.font.init()
my_font = pygame.font.SysFont('suruma', 50)

gameDisplay = pygame.display.set_mode((display_width, display_height))
pygame.display.set_caption('#YOLO')
clock = pygame.time.Clock()
# pygame.mouse.get_pos()

card_images = {}
suits = {'h', 'c', 'd', 's'}
values = {'a', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'j', 'q', 'k'}

for suit in suits:
	for value in values:
		card_images[(value, suit)]=pygame.image.load('pics/'+suit+value+'.png')

back_image = pygame.image.load('pics/backs/'+card_back+'.png')


def write(s, x, y, color=(0,0,0)):
	pygfile = my_font.render(s, False, color)
	gameDisplay.blit(pygfile, (x,y))	


class card:
	def __init__(self, value, suit, faceup):
		self.value = value
		self.suit = suit
		self.faceup = faceup

	def show(self, x, y):
		if self.faceup == True:
			gameDisplay.blit(card_images[(self.value, self.suit)], (x, y))	
		else:
			gameDisplay.blit(back_image, (x, y))

	def flip(self):
		if self.faceup == True:
			self.faceup = False
		else:
			self.faceup = True



class deck:
	def __init__(self, deck_num):
		self.deck_num = deck_num
		self.cards = []
		self.discard = []
		for i in range(deck_num):
			for value in values:
				for suit in suits:
					self.cards += [card(value, suit, False)]
		random.shuffle(self.cards)

	def collect(self, hand):
		self.discard += hand.cards
		hand.cards = []

	def reshuffle(self):
		for card in self.discard:
			card.faceup = False
		self.cards += self.discard
		self.discard = []
		random.shuffle(self.cards)

class hand:
	def __init__(self):
		self.cards = []
		self.turn = False

	def deal(self, deck, num):
		for i in range(num):
			self.cards += [deck.cards.pop()]
			self.cards[-1].faceup = True

	def flip(self):
		for c in self.cards:
			c.flip()


	def show(self, x, y):
		offset = 0
		for c in self.cards:
			c.show(x+offset, y)
			offset += 50

	def show_total(self, x, y):
		tot, s = self.total()
		if s:
			disp = my_font.render(str(tot-10)+'/'+str(tot), False, black)
		else:
			disp = my_font.render(str(tot), False, black)
		gameDisplay.blit(disp, (x,y))
	


	def pick(self, deck, value):
		for i in range(len(deck.cards)):
			if deck.cards[i].value == value:
				self.cards += [deck.cards.pop(i)]
				self.cards[-1].faceup = True
				random.shuffle(deck.cards)
				return True
		return False

	def total(self):
		s = 0
		anum = 0
		soft = False
		for c in self.cards: 
			try:
				s += int(c.value)
			except:
				if(c.value=='j' or c.value=='q' or c.value=='k'):
					s += 10
				elif(c.value=='a'):
					anum += 1
		if anum != 0:
			s += anum-1
			if (s+11>21):
				s += 1
			else:
				s += 11
				soft = True
		return s, soft


def write_menu():
	x, y, off = 800, 0, 50
	write('a: Hit', x, y)
	y+=off
	write('s: Stand', x, y)
	y+=off
	write('d: Double Down', x, y)
	y+=off
	write('f: Split', x, y)
	y+=off
#	write('g: Surrender', x, y)
#	y+=off
	write('b: Show Basic Strategy', x, y)
	y+=off
	write('c: Show Count', x, y)
	y+=off
	write('Arrows: Change Bet', x, y)
	y+=off
	write('SPACE: New Round', x, y)


def dealer_plays(dealer, d):
	dealer.cards[0].flip()
	tot, s = dealer.total()
	while(tot < 17 or (tot ==17 and s)):
		dealer.deal(d, 1)
		tot, s = dealer.total()	


def winnings(dealer, hands, pots):
	detot=dealer.total()[0] 
	winnings = 0

	for i in range(len(hands)):
		pltot = hands[i].total()[0]		
	
		if len(hands[i].cards)==2 and pltot==21:
			winnings += int(5*pots[i]/2)
		elif pltot == detot:
			winnings += pots[i]
		elif pltot < 22 and (pltot > detot or detot > 21):
			winnings += 2*pots[i]
	return winnings

def hilo(cards):
	hcount = 0
	for c in cards:
		if c.value == 'a' or c.value == '10' or c.value == 'j' or c.value == 'q' or c.value == 'k':
			hcount -= 1
		if c.value == '2' or c.value == '3' or c.value == '4' or c.value == '5' or c.value == '6':
			hcount += 1
	return hcount		


def basic_strategy(player, dealer, split):
	dealer_card = dealer.cards[1].value
	tot, soft = player.total()
	try:
		dtot = int(dealer_card)
	except:
		if dealer_card == 'j' or dealer_card == 'q' or dealer_card == 'k':
			dtot = 10
		elif dealer_card == 'a':
			dtot = 11

	if split and len(player.cards) == 2 :
		if (player.cards[0].value==player.cards[1].value or (tot == 20 and not soft)) :
			pcard = player.cards[0].value
			if pcard == 'a' or pcard == '8':
				return 'split'
			elif pcard == '5' or tot == 20 : 
				pass
			elif dealer_card=='10' or dealer_card=='j' or dealer_card=='q' or dealer_card=='k' or dealer_card=='a':
				pass
			elif dealer_card=='5' or dealer_card=='6':
				return 'split'
			elif (dealer_card=='9' or dealer_card=='8') and	(pcard != '9'):
				pass
			elif pcard == '2' or pcard == '3' or pcard == '7' :
				return 'split'
			elif dealer_card == '7':
				pass
			elif pcard == '9':
				return 'split'
			elif pcard == '4':
				pass
	if not soft:
		if tot > 16:
			return 'stand'
		elif 17 > tot > 12:
			if dtot > 6:
				return 'hit'
			else:
				return 'stand'
		elif tot == 12:
			if dtot > 6:
				return 'hit'
			elif dtot > 3:
				return 'stand'
			else:
				return 'hit'
		elif tot == 11:
			if len(player.cards)==2:		
				return 'double'
			else:
				return 'hit'
		elif tot == 10:
			if dtot > 9:
				return 'hit'
			else:
				if len(player.cards)==2:
					return 'double'
				else:
					return 'hit'
		elif tot == 9:
			if dtot > 6 or dtot ==2:
				return 'hit'
			elif dtot > 2:
				if len(player.cards)==2:
					return 'double'
				else:
					return 'hit'
		elif tot < 9:
			return 'hit'	

	elif soft:
		if tot > 19:
			return 'stand'
		if tot == 19:
			if dtot == 6 and len(player.cards) == 2:
				return 'double'
			else:
				return 'stand'
		if tot == 18:
			if dtot > 8:
				return 'hit'
			elif dtot > 6 or len(player.cards) > 2:
				return 'stand'
			else:
				return 'double'
		if tot < 18:
			if len(player.cards) > 2:
				return 'hit'
			elif dtot > 6:
				return 'hit'
			elif dtot > 4:
				return 'double'
			elif dtot == 4:
				if tot < 15:
					return 'hit'
				else:
					return 'double'
			elif dtot == 3:
				if tot < 17:
					return 'hit'
				else:
					return 'double'
			elif dtot == 2:
				if tot == 18:
					return 'double'
				else:
					return 'hit'
	return 'error'
	

def gameloop():

	d = deck(shoe_size)
	my_hands = [hand()]
	rounds = 0
	dealer = hand()
	crashed = False	
	showbs = False
	newround = True
	roundover = False
	deck_min_lim = int(52*penetration)
	showcount = True
	count = 0
	bet = 20
	bankroll = bankrollstart
	godmode = False
	
	while not crashed:


		if newround:
			rounds += 1
			count += hilo(dealer.cards)
			truecount = int(count*52/len(d.cards))
			if godmode:
				if truecount < 2:
					bet = 20
				elif truecount < 10:
					bet = 20*truecount
				else:
					bet = 200
			d.collect(dealer)
			for h in my_hands:
				count += hilo(h.cards)
				d.collect(h)
			my_hands = [hand()]
			if len(d.cards) < deck_min_lim:
				d.reshuffle() 	
				count = 0
				truecount = 0
			my_hands[0].deal(d, 2)
			dealer.deal(d, 2)
			dealer.cards[0].flip()
			tookearnings = False
			newround = False
			showbs = False
			split_level=0
			bankroll -= bet
			win = 0
			pots = [bet]

		for event in pygame.event.get():

			if event.type == pygame.QUIT:
				crashed = True
				profit = bankroll - bankrollstart
				print("Profit :"+str(profit))
				print("Hands :"+str(rounds))
				print("Profit/Hand :"+str(int(profit/rounds)))
			if event.type == pygame.KEYUP:
				if event.key == pygame.K_p:
					godmode = False
	
			if event.type == pygame.KEYDOWN or godmode:	
				if godmode:
					event.key = pygame.K_b
				if event.key == pygame.K_p:
					godmode = True
				if event.key == pygame.K_c:
					if showcount:
						showcount = False
					else:
						showcount = True
				if event.key == pygame.K_b:
					if showbs:
						showbs = False
						if godmode:
							if roundover:
								event.key = pygame.K_SPACE	
							else:
								if action == 'hit':
									event.key = pygame.K_a
								elif action == 'stand':
									event.key = pygame.K_s
								elif action == 'double':
									event.key = pygame.K_d
								elif action == 'split':
									event.key = pygame.K_f
					else:
						showbs = True	
						if roundover:
							action = 'next'
						else:
							action = basic_strategy(my_hands[split_level], dealer, (len(my_hands) < 4))
				if roundover:
					if event.key == pygame.K_UP:
						bet += 10
					if event.key == pygame.K_DOWN:
						bet -= 10
					if event.key == pygame.K_RIGHT:
						bet += 100
					if event.key == pygame.K_LEFT:
						bet -= 100
					if event.key == pygame.K_SPACE:
						newround = True
						roundover = False	
						bankroll += win
				else:
						
					if event.key == pygame.K_a:
						showbs = False
						my_hands[split_level].deal(d, 1)
						if my_hands[split_level].total()[0] > 21:
							roundover = True
							if split_level == 0:
								dealer_plays(dealer, d)
					if event.key == pygame.K_s:
						roundover = True
						showbs = False
						if split_level == 0:	
							dealer_plays(dealer, d)
					if event.key == pygame.K_d:
						showbs = False
						if (len(my_hands[split_level].cards) == 2):
							bankroll -= bet
							pots[split_level] += bet
							my_hands[split_level].deal(d, 1)
							roundover = True
							if my_hands[split_level].total()[0] < 22 :
								if split_level == 0:
									dealer_plays(dealer, d)
					if event.key == pygame.K_f:
						showbs = False
						write(str(my_hands[split_level].cards[0].value), 0, 300)
						tens = {'10', 'j', 'q', 'k'}
						tenpair = False
						if (my_hands[split_level].cards[0].value in tens and my_hands[split_level].cards[1].value in tens):
							tenpair = True
						if (my_hands[split_level].cards[0].value == my_hands[split_level].cards[1].value or tenpair):
							if ((len(my_hands[split_level].cards)==2) and len(my_hands) < 4):	
								split_level += 1
								bankroll -= bet
								pots += [bet]
								my_hands.insert(split_level, copy.deepcopy(my_hands[split_level-1]))
								my_hands[split_level].cards.pop(0)
								my_hands[split_level-1].cards.pop(1)
								my_hands[split_level-1].deal(d, 1)	
								my_hands[split_level].deal(d, 1)


		if roundover and not tookearnings:
			showbs = False		
			if split_level > 0:	
				roundover = False
				tookearnings = False	
				split_level -= 1  
			else:							
				tookearnings = True
				win = winnings(dealer, my_hands, pots)
			
				

		gameDisplay.fill(white)	
		write_menu()
		write("Cards left: "+str(len(d.cards)), 0, 0)
		write("Bankroll: $"+str(bankroll), 0, 50)
		write("Bet: $"+str(bet), 0, 100)


		for n in range(len(my_hands)):
			my_hands[n].show(n*300, 500)
			my_hands[n].show_total(n*300+50, 400)
		dealer.show(400, 0)	
		if roundover:	
			dealer.show_total(500, 350)
			write("Pot: $"+str(win), 0, 150)
		else:	
			write("V", split_level*300+50, 450, color=green)
			write("Pot: $"+str(sum(pots)), 0, 150)
		if showcount:
			write("Running count :"+str(count), 0, 200)
			write("True count :"+str(truecount), 0, 250)

		if showbs:
			write("Basic strategy: "+action, 0, 300)

		pygame.mouse.set_visible(True)
		pygame.display.update()
		clock.tick(60)

gameloop()
pygame.quit()
quit()
