#!/usr/bin/env python3
import random, copy, pdb
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt

rounds = 100000
penetration = 1.5
shoe_size = 6
card_back = 'reg'
global bankrollstart 
bankrollstart = 0

#######################################################################

card_images = {}
suits = {'h', 'c', 'd', 's'}
values = {'a', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'j', 'q', 'k'}

def bet_strat(tc):
	return 20


class card:
	def __init__(self, value, suit, faceup):
		self.value = value
		self.suit = suit
		self.faceup = faceup


	def flip(self):
		if self.faceup == True:
			self.faceup = False
		else:
			self.faceup = True


class deck:
	def __init__(self, deck_num):
		self.deck_num = deck_num
		self.cards = []
		self.discard = []
		for i in range(deck_num):
			for value in values:
				for suit in suits:
					self.cards += [card(value, suit, False)]
		random.shuffle(self.cards)

	def collect(self, hand):
		self.discard += hand.cards
		hand.cards = []

	def reshuffle(self):
		for card in self.discard:
			card.faceup = False
		self.cards += self.discard
		self.discard = []
		random.shuffle(self.cards)

class hand:
	def __init__(self):
		self.cards = []
		self.turn = False

	def deal(self, deck, num):
		for i in range(num):
			self.cards += [deck.cards.pop()]
			self.cards[-1].faceup = True

	def flip(self):
		for c in self.cards:
			c.flip()


	def pick(self, deck, value):
		for i in range(len(deck.cards)):
			if deck.cards[i].value == value:
				self.cards += [deck.cards.pop(i)]
				self.cards[-1].faceup = True
				random.shuffle(deck.cards)
				return True
		return False

	def total(self):
		s = 0
		anum = 0
		soft = False
		for c in self.cards: 
			try:
				s += int(c.value)
			except:
				if(c.value=='j' or c.value=='q' or c.value=='k'):
					s += 10
				elif(c.value=='a'):
					anum += 1
		if anum != 0:
			s += anum-1
			if (s+11>21):
				s += 1
			else:
				s += 11
				soft = True
		return s, soft



def dealer_plays(dealer, d):
	dealer.cards[0].flip()
	tot, s = dealer.total()
	while(tot < 17 or (tot ==17 and s)):
		dealer.deal(d, 1)
		tot, s = dealer.total()	


def winnings(dealer, hands, pots):
	detot=dealer.total()[0] 
	winnings = 0
	for i in range(len(hands)):
		pltot = hands[i].total()[0]		
		if pltot == detot:
			winnings += pots[i]
		elif len(hands[i].cards)==2 and pltot==21:
			winnings += int(5*pots[i]/2)
		elif pltot < 22 and (pltot > detot or detot > 21):
			winnings += 2*pots[i]
	return winnings

def hilo(cards):
	hcount = 0
	for c in cards:
		if c.value == 'a' or c.value == '10' or c.value == 'j' or c.value == 'q' or c.value == 'k':
			hcount -= 1
		if c.value == '2' or c.value == '3' or c.value == '4' or c.value == '5' or c.value == '6':
			hcount += 1
	return hcount		


def basic_strategy(player, dealer, split):
	dealer_card = dealer.cards[1].value
	tot, soft = player.total()
	try:
		dtot = int(dealer_card)
	except:
		if dealer_card == 'j' or dealer_card == 'q' or dealer_card == 'k':
			dtot = 10
		elif dealer_card == 'a':
			dtot = 11

	if split and len(player.cards) == 2 :
		if (player.cards[0].value==player.cards[1].value or (tot == 20 and not soft)) :
			pcard = player.cards[0].value
			if pcard == 'a' or pcard == '8':
				return 'split'
			elif pcard == '5' or tot == 20 : 
				pass
			elif dealer_card=='10' or dealer_card=='j' or dealer_card=='q' or dealer_card=='k' or dealer_card=='a':
				pass
			elif dealer_card=='5' or dealer_card=='6':
				return 'split'
			elif (dealer_card=='9' or dealer_card=='8') and	(pcard != '9'):
				pass
			elif pcard == '2' or pcard == '3' or pcard == '7' :
				return 'split'
			elif dealer_card == '7':
				pass
			elif pcard == '9':
				return 'split'
			elif pcard == '4':
				pass
	if not soft:
		if tot > 16:
			return 'stand'
		elif 17 > tot > 12:
			if dtot > 6:
				return 'hit'
			else:
				return 'stand'
		elif tot == 12:
			if dtot > 6:
				return 'hit'
			elif dtot > 3:
				return 'stand'
			else:
				return 'hit'
		elif tot == 11:
			if len(player.cards)==2:		
				return 'double'
			else:
				return 'hit'
		elif tot == 10:
			if dtot > 9:
				return 'hit'
			else:
				if len(player.cards)==2:
					return 'double'
				else:
					return 'hit'
		elif tot == 9:
			if dtot > 6 or dtot ==2:
				return 'hit'
			elif dtot > 2:
				if len(player.cards)==2:
					return 'double'
				else:
					return 'hit'
		elif tot < 9:
			return 'hit'	

	elif soft:
		if tot > 19:
			return 'stand'
		if tot == 19:
			if dtot == 6 and len(player.cards) == 2:
				return 'double'
			else:
				return 'stand'
		if tot == 18:
			if dtot > 8:
				return 'hit'
			elif dtot > 6 or len(player.cards) > 2:
				return 'stand'
			else:
				return 'double'
		if tot < 18:
			if len(player.cards) > 2:
				return 'hit'
			elif dtot > 6:
				return 'hit'
			elif dtot > 4:
				return 'double'
			elif dtot == 4:
				if tot < 15:
					return 'hit'
				else:
					return 'double'
			elif dtot == 3:
				if tot < 17:
					return 'hit'
				else:
					return 'double'
			elif dtot == 2:
				if tot == 18:
					return 'double'
				else:
					return 'hit'
	return 'error'


	

def loop():

	bankroll_list = []
	truecount_list = []
	d = deck(shoe_size)
	my_hands = [hand()]
	dealer = hand()
	crashed = False	
	newround = True
	roundover = False
	deck_min_lim = int(52*penetration)
	showcount = True
	count = 0
	bet = 20
	n=0
	bankroll = bankrollstart
	

	while(n < rounds):

		if newround:
			n+=1
			count += hilo(dealer.cards)
			truecount = int(count*52/len(d.cards))
			bet = bet_strat(truecount)
			d.collect(dealer)
			for h in my_hands:
				count += hilo(h.cards)
				d.collect(h)
			my_hands = [hand()]
			if len(d.cards) < deck_min_lim:
				d.reshuffle() 	
				count = 0
				truecount = 0
			my_hands[0].deal(d, 2)
			dealer.deal(d, 2)
			dealer.cards[0].flip()
			tookearnings = False
			newround = False
			split_level=0
			bankroll -= bet
			win = 0
			pots = [bet]
			truecount_list += [truecount]
			bankroll_list += [bankroll]
			if dealer.total()[0] == 21:
				roundover = True
			
			
		if roundover:
			action = 'next'
			bankroll += win
			roundover = False
			newround = True
		else:
			action = basic_strategy(my_hands[split_level], dealer, (len(my_hands)<4))
				
			if action == 'hit':
				my_hands[split_level].deal(d, 1)
				if my_hands[split_level].total()[0] > 21:
					roundover = True
					if split_level == 0:
						dealer_plays(dealer, d)
			elif action == 'stand':
				roundover = True
				if split_level == 0:	
					dealer_plays(dealer, d)
			elif action == 'double':
				if (len(my_hands[split_level].cards) == 2):
					bankroll -= bet
					pots[split_level] += bet
					my_hands[split_level].deal(d, 1)
					roundover = True
					if my_hands[split_level].total()[0] < 22 :
						if split_level == 0:
							dealer_plays(dealer, d)
			elif action == 'split':
				tens = {'10', 'j', 'q', 'k'}
				tenpair = False
				if (my_hands[split_level].cards[0].value in tens and my_hands[split_level].cards[1].value in tens):
					tenpair = True
				if (my_hands[split_level].cards[0].value == my_hands[split_level].cards[1].value or tenpair):
					if ((len(my_hands[split_level].cards)==2) and len(my_hands) < 4):	
						split_level += 1
						bankroll -= bet
						pots += [bet]
						my_hands.insert(split_level, copy.deepcopy(my_hands[split_level-1]))
						my_hands[split_level].cards.pop(0)
						my_hands[split_level-1].cards.pop(1)
						my_hands[split_level-1].deal(d, 1)	
						my_hands[split_level].deal(d, 1)


		if roundover and not tookearnings:
			if split_level > 0:	
				roundover = False
				tookearnings = False	
				split_level -= 1  
			else:							
				tookearnings = True
				win = winnings(dealer, my_hands, pots)
			

	
	return bankroll_list, truecount_list


bl, tl = loop()

#dbl = [bl[i+1]-bl[i] for i in range(len(bl)-1)]
#tl.pop()

plt.plot(bl)
plt.show()


quit()
